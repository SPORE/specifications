=encoding utf-8

=head1 NAME

Spore (B<S>pecifications to a B<Po>rtable B<R>EST B<E>nvironment) Description Implementation

=head1 ABSTRACT

Spore is a specification for describing HTTP APIs which happen to suffice some
constraints laid out by the REST architectural style. It can be parsed and used
automatically by client implementations to communicate with the described API.

This document describes how to write the description for such an API in
order to be used with a SPORE Client Implementation.

=head1 TERMINOLOGY

=head2 API

An I<API> is the interface to an application that can exchange data with client
applications over HTTP/HTTPS. It presents one or more method endpoints which
accept HTTP requests with varying headers, parameters and body content to
perform specific operations.

=head2 Client Implementation

A I<Client Implementation> is a library targeting a specific system or
language. It can use I<Descriptions files> to create programmatic interfaces
usable in applications.

=head2 Description File

A I<Description File> is a file in JSON format describing an I<API> (see
specification). It can directly be used by a  I<Client implementation> to
create a programmatic interface in the target system.

=head2 Payload

The I<Payload> is the data sent in the body of a POST or PUT request.
The Payload is unrelated to method parameters defined herein.

=head2 Format

The I<Format> is the kind of data serialization used for the Payload.

=head1 API DESCRIPTION

An API should provide a description file, in JSON format, that conforms with this description.

=head2 GENERIC DESCRIPTION

This part describes the overall API and provides some default values for the
individual method descriptions.

=head3 name

A required simple name to describe the specification

    "name" : "CouchDB"

=head3 authority

An optional authority of the description

    "authority" : "GITHUB:franckcuny"

=head3 base_url

An optional base URL for the API

    "base_url" : "http://api.twitter.com/1/"

=head3 formats

A list of supported formats

    "formats" : [
      "json"
      "xml"
    ]

=head3 version

A mandatory version number of the SPORE description of the API, expressed as a string

    "version" : "0.1"

=head3 authentication

An optional boolean to specify if this API requires authentication for all the methods

    "authentication" : true

The default is false.

=head3 methods

A mandatory hash of method names and specifications.
See L</METHOD DESCRIPTION>.

    "methods" : { ... }

The C<methods> hash B<MUST> contain at least one method.

=head2 METHOD DESCRIPTION

A method must have a name, which is the key in the L</methods> hash

    "methods" : {
        "public_timeline" : { ... }
    }

=head3 method

The mandatory C<method> attribute specifies the HTTP method to use for this call

    "method" : "GET"

=head3 path

The mandatory C<path> attribute specifies the URI path for this method.

    "path" : "/login"

The path can contain I<placeholders>. A placeholder B<MUST> begin with a C<:>
or be surrounded by a C<{> and a C<}> like in the RFC 6570 URI Template:

    "path" : "/statuses/public_timeline.:format"

    "path" : "/statuses/public_timeline.{format}"

XXX How can non-placeholder :foo's be included in the path? i.e. is there an escape mechanism?
XXX What happens in this example if 'format' isn't listed in params/required?
XXX What happens if a parameter needs to be followed by a word character? i.e. can something like :{format}foo be used?

=head3 optional_params

An optional list of optional parameters (contrast with L</required_params>).
This list will be used to replace value in placeholders, and if not used in the
path, will be added to the query part of the request URL.

    "optional_params" : [
      "trim_user",
      "include_entities"
    ]

=head3 required_params

An optional list of required parameters (contrast with L</optional_params>).
This list will be used to replace value in placeholders and, if not used in the
path, will be added to the query part of the request URL.

Parameters that are required B<MUST NOT> be repeated in the B<optional_params> field

    "required" : [
      "format"
    ]

=head3 expected_status

An optional list of accepted HTTP status codes for this method

    "expected" : [
      200,
      204
    ]

If C<expected> is specified then an exception will be thrown if the response
status is not in the list.  If C<expected> is not specified then an exception
will be thrown if the response status is not in the range 200 through 299.

XXX a global default_expected could be handy.

=head3 description

An optional simple description for the method. This should not be considered as
documentation.

    "description" : "Returns the 20 most recent statuses, including retweets if they exist, from non-protected users"

=head3 authentication

An optional boolean to specify if this method requires authentication

    "authentication" : false

=head3 base_url

An optional base URL for this method, if different to the default specified above.

    base_url: http://api.twitter.com/1/

XXX might be nice to be able to express this as a relative URL (relative to api_base_url) That could be handled at build time.

=head3 formats

An optional list of supported formats

    "format" : [
      "json",
      "xml"
    ]

=head3 documentation

Optional detailed documentation for the given method

    "documentation" : "The public timeline is cached for 60 seconds. Requesting more frequently than that will not return any more data, and will count against your rate limit usage."

=head3 SAMPLE

A description for the twitter API (only the API description part and the first method):

    {
        "base_url" : "http://api.twitter.com/1",
        "version" : "0.1",
        "methods" : {
            "public_timeline" : {
                "optional_params" : [
                    "trim_user",
                    "include_entities"
                ],
                "required_params" : [
                    "format"
                ],
                "path" : "/statuses/public_timeline.:format",
                "method" : "GET"
            }
        }
    }

=head3 CALLS

XXX

=head1 CHANGES

=head2 0.1 - 2010.10.xx

Initial version.

=head1 ACKNOWLEDGEMENTS

Some parts of this specification are adopted from the following specifications.

=over 4

=item *

PSGI Specification L<PSGI|http://search.cpan.org/perldoc?PSGI>

=item *

PEP333 Python Web Server Gateway Interface L<http://www.python.org/dev/peps/pep-0333>

=item *

Rack L<http://rack.rubyforge.org/doc/SPEC.html>

=item *

JSGI Specification L<http://jackjs.org/jsgi-spec.html>

=back

I'd like to thank authors of these great documents.

=head1 AUTHOR

=over 4

=item franck cuny

=item nils grunwald

=back

=head1 CONTRIBUTORS

=over 4

=item damien "bl0b" leroux

=item Fran√ßois Perrad

=item Tim Bunce

=back

=head1 COPYRIGHT AND LICENSE

Copyright XXX, 2010.

This work is licensed under a L<Creative Commons Attribution-ShareAlike 3.0
Unported License|http://creativecommons.org/licenses/by-sa/3.0/>.

=cut
